{"version":3,"sources":["SeasonsDisplay.js","Spinner.js","ErrorPage.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonsDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","ErrorPage","App","state","err","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"0OAGMA,G,MAAgB,CAClBC,OAAO,CACHC,KAAM,cACNC,SAAU,OAGdC,OAAO,CACHF,KAAM,eACNC,SAAU,eA0BHE,EAbQ,SAACC,GAEpB,IAXeC,EAAIC,EAWbC,GAXSF,EAWUD,EAAMC,KAXZC,GAWiB,IAAIE,MAAOC,YAVpC,GAAKH,EAAQ,EACbD,EAAK,EAAI,SAAW,SAGpBA,EAAK,EAAG,SAAU,UAIC,EAGLP,EAAaS,GAA/BP,EAHuB,EAGvBA,KAAMC,EAHiB,EAGjBA,SACb,OACI,yBAAKS,UAAS,0BAAuBH,IACjC,uBAAGG,UAAS,oBAAeT,EAAf,mBACZ,4BAAKD,GACL,uBAAGU,UAAS,qBAAgBT,EAAhB,qBC7BlBU,EAAU,SAACP,GAEb,OACA,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,kBAAkBN,EAAMQ,WAM/CD,EAAQE,aAAc,CAClBD,QAAS,WAIED,QCFAG,G,MAXG,SAACV,GAEf,OACI,yBAAKM,UAAS,yBACV,uBAAGA,UAAS,iCACZ,4BAAKN,EAAMQ,SACX,uBAAGF,UAAS,qCCLlBK,E,4MACFC,MAAQ,CAACX,IAAK,KAAMY,IAAK,I,kEAEL,IAAD,OAEfC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GACG,EAAKC,SAAS,CAAClB,IAAIiB,EAASE,OAAOC,cAEvC,SAACR,GACG,EAAKM,SAAS,CAACN,IAAKA,EAAIL,e,sCAOhC,OAAKc,KAAKV,MAAMX,KAAOqB,KAAKV,MAAMC,IAE1B,kBAAC,EAAD,CAAWL,QAAQ,kCAIvBc,KAAKV,MAAMX,MAAQqB,KAAKV,MAAMC,IAE1B,kBAAC,EAAD,CAAgBZ,IAAKqB,KAAKV,MAAMX,MAKhC,kBAAC,EAAD,CAASO,QAAQ,yC,+BAIzB,OACG,6BAAMc,KAAKC,qB,GAnCJC,IAAMC,WAwCxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,W","file":"static/js/main.e67f1507.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css'\r\n\r\nconst seasonConfig  = {\r\n    summer:{\r\n        text: 'Its Burning',\r\n        iconName: 'sun'\r\n    },\r\n\r\n    winter:{\r\n        text: 'Its Chilling',\r\n        iconName: 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat,month) =>{\r\n    if (month >2 && month < 9){\r\n        return lat> 0 ? 'summer' : 'winter'\r\n    }\r\n    else {\r\n        return lat >0 ?'winter': 'summer'\r\n    }\r\n};\r\n\r\nconst SeasonsDisplay = (props) => {\r\n\r\n    const season = getSeason(props.lat, new Date().getMonth())\r\n    const {text, iconName} = seasonConfig[season]\r\n    return (\r\n        <div className = {`seasons-display ${season}`}> \r\n            <i className={`icon-left ${iconName} massive icon`}/>\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right ${iconName} massive icon`}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonsDisplay;","import React from 'react';\r\n\r\n\r\nconst Spinner = (props) => {\r\n\r\n    return (\r\n    <div className=\"ui active dimmer\">\r\n        <div className=\"ui text loader\">{props.message}</div>\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\nSpinner.defaultProps ={\r\n    message: \"Loading\"\r\n}\r\n\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './ErrorPage.css'\r\n\r\n\r\n\r\nconst ErrorPage = (props) => {\r\n\r\n    return (\r\n        <div className = {`error-page background`}> \r\n            <i className={`icon-left frown massive icon`}/>\r\n            <h1>{props.message}</h1>\r\n            <i className={`icon-right frown massive icon`}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonsDisplay from './SeasonsDisplay';\r\nimport Spinner from './Spinner';\r\nimport ErrorPage from './ErrorPage';\r\n\r\nclass App extends React.Component {\r\n    state = {lat: null, err: ''}\r\n\r\n    componentDidMount(){\r\n\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                this.setState({lat:position.coords.latitude })\r\n            },\r\n            (err) => {\r\n                this.setState({err: err.message})\r\n            }\r\n        );\r\n\r\n    };\r\n\r\n    renderContent(){\r\n        if (!this.state.lat && this.state.err){\r\n            return (\r\n                <ErrorPage message=\"Oh No! Unable to get location\" />\r\n             );\r\n        };\r\n\r\n        if (this.state.lat && !this.state.err){\r\n            return (\r\n                <SeasonsDisplay lat={this.state.lat} />\r\n            );\r\n            \r\n        };\r\n\r\n        return (<Spinner message=\"Please accept the location request\" /> );\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n           <div>{this.renderContent()}</div>\r\n        );\r\n    };\r\n};\r\n\r\nReactDOM.render(<App/>, document.querySelector('#root'));\r\n"],"sourceRoot":""}